
Start up GIT repository for project

git config --global user.name "Steven Ng"
git config --global user.email steven@nomadicoder.com

mkdir SitRepStage
cd SitRepStage
git init
touch README
git add README
git commit -m 'initial commit'
git remote add origin git@github.com:nomadicoder/SitRepStage.git
git push origin master

rails SitRepStage
cd SitRepStage
vi .gitignore
ls -ralt
vi .gitignore
git status
touch tmp/.gitignore log/.gitignore vendor/.gitignore
git status
git add .
git commit -a -m "Initial rails import"


rake db:create:all
script/generate scaffold stage number:integer landmark:string miles:float difficulty:integer estimated_pace:time estimated_time:time


Successful first shot:
rake db:create:all
script/generate scaffold stage number:integer landmark:string miles:float difficulty:integer estimated_pace:time estimated_time:time
rake db:migrate
script/server

View http://0.0.0.0:3000/stages

Change data types and see what happens

rake db:migrate VERSION=0
rm db/*.sqlite3
script/generate scaffold stage number:integer landmark:string miles:decimal(5,1) difficulty:integer estimated_pace:time estimated_time:time
rake db:migrate
#edit db/migrate/*_create_stages.rb and add precision:  
#   t.decimal :miles, :precision=> 1, :scale=> 3
script/server

What is the decimal type in sqlite? 


Shouldn't have times for stage.  Those are calculated from runner.

remove_column:

script/generate migration remove_times_from_stage estimated_pace:time estimated_time:time
rake db:migrate


Add runner.  Basic information is estimated pace and actual time.

script/generate scaffold runner stage_id:integer name:string estimated_pace:time completed:boolean actual_time:time

Modify stage

Stage -- has_many runners (since we'res supporting multiple teams)
    class Stage < ActiveRecord::Base
      has_many :runner
    end
    
runner -- belongs_to stage. (since a runner will run is will either run one stage or is an alternate.  No stage indicates an alternate).

    class Runner < ActiveRecord::Base
      belongs_to :stage
    end
    
We support multiple teams, so we will add a team with the name and number.

script/generate scaffold team number:integer name:string

Create a results page

script/generate controller results index
      exists  app/controllers/
      exists  app/helpers/
      create  app/views/results
      exists  test/functional/
      exists  test/unit/helpers/
      create  app/controllers/results_controller.rb
      create  test/functional/results_controller_test.rb
      create  app/helpers/results_helper.rb
      create  test/unit/helpers/results_helper_test.rb
      create  app/views/results/index.html.erb
      
     
     
Goal is to link a runner to a stage and display the runner name on the stage

Create test runner data

ruby script/generate migration add_test_runner_data

class AddTestRunnerData < ActiveRecord::Migration 
    def self.up
        Runner.delete_all 
        Runner.create(
            :stage => 1,
            :name => %{Adam},
            :pace => '08:42',
            :completed => false
        )
        #...
    end
    
    def self.down
        Runner.delete_all
    end
end

Add migration with B2V default stage data.  See page 91 in Agile Web Dev w Rails 3rd ed.

ruby script/generate migration add_stage_data

class AddStageData < ActiveRecord::Migration
  def self.up
    Stage.delete_all 
    Stage.create(
        :number => 1,
        :landmark => %{Start},
        :miles => 5.4,
        :difficulty => 13
    )
    #...
  end

  def self.down
    Stage.delete_all
  end
end

Add stage status page
script/generate controller status index update

GIT updates:

Jetlabpro:SitRepStage skng$ git status
# On branch master
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   config/routes.rb
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       app/controllers/results_controller.rb
#       app/controllers/runners_controller.rb
#       app/controllers/stages_controller.rb
#       app/controllers/status_controller.rb
#       app/controllers/teams_controller.rb
#       app/helpers/results_helper.rb
#       app/helpers/runners_helper.rb
#       app/helpers/stages_helper.rb
#       app/helpers/status_helper.rb
#       app/helpers/teams_helper.rb
#       app/models/
#       app/views/
#       db/migrate/
#       db/schema.rb
#       generate
#       notebook.txt
#       public/stylesheets/
#       test/fixtures/
#       test/functional/
#       test/unit/
no changes added to commit (use "git add" and/or "git commit -a")
Jetlabpro:SitRepStage skng$ git commit -a -m "Added runners, teams, results and status"
[master 511d2f8] Added runners, teams, results and status
 1 files changed, 4 insertions(+), 0 deletions(-)
Jetlabpro:SitRepStage skng$ git push
Counting objects: 7, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 389 bytes, done.
Total 4 (delta 3), reused 0 (delta 0)
To git@github.com:nomadicoder/SitRepStage.git
   ea8f5fb..511d2f8  master -> master
Jetlabpro:SitRepStage skng$ git status
# On branch master
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       app/controllers/results_controller.rb
#       app/controllers/runners_controller.rb
#       app/controllers/stages_controller.rb
#       app/controllers/status_controller.rb
#       app/controllers/teams_controller.rb
#       app/helpers/results_helper.rb
#       app/helpers/runners_helper.rb
#       app/helpers/stages_helper.rb
#       app/helpers/status_helper.rb
#       app/helpers/teams_helper.rb
#       app/models/
#       app/views/
#       db/migrate/
#       db/schema.rb
#       generate
#       notebook.txt
#       public/stylesheets/
#       test/fixtures/
#       test/functional/
#       test/unit/
nothing added to commit but untracked files present (use "git add" to track)
Jetlabpro:SitRepStage skng$ git add
Nothing specified, nothing added.
Maybe you wanted to say 'git add .'?
Jetlabpro:SitRepStage skng$ git add *
Jetlabpro:SitRepStage skng$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       new file:   app/controllers/results_controller.rb
#       new file:   app/controllers/runners_controller.rb
#       new file:   app/controllers/stages_controller.rb
#       new file:   app/controllers/status_controller.rb
#       new file:   app/controllers/teams_controller.rb
#       new file:   app/helpers/results_helper.rb
#       new file:   app/helpers/runners_helper.rb
#       new file:   app/helpers/stages_helper.rb
#       new file:   app/helpers/status_helper.rb
#       new file:   app/helpers/teams_helper.rb
#       new file:   app/models/runner.rb
#       new file:   app/models/stage.rb
#       new file:   app/models/team.rb
#       new file:   app/views/layouts/runners.html.erb
#       new file:   app/views/layouts/stages.html.erb
#       new file:   app/views/layouts/teams.html.erb
#       new file:   app/views/results/index.html.erb
#       new file:   app/views/runners/edit.html.erb
#       new file:   app/views/runners/index.html.erb
#       new file:   app/views/runners/new.html.erb
#       new file:   app/views/runners/show.html.erb
#       new file:   app/views/stages/edit.html.erb
#       new file:   app/views/stages/index.html.erb
#       new file:   app/views/stages/new.html.erb
#       new file:   app/views/stages/show.html.erb
#       new file:   app/views/status/index.html.erb
#       new file:   app/views/status/update.html.erb
#       new file:   app/views/teams/edit.html.erb
#       new file:   app/views/teams/index.html.erb
#       new file:   app/views/teams/new.html.erb
#       new file:   app/views/teams/show.html.erb
#       new file:   db/migrate/20091021230549_create_stages.rb
#       new file:   db/migrate/20091022140215_remove_times_from_stage.rb
#       new file:   db/migrate/20091022144051_create_runners.rb
#       new file:   db/migrate/20091022144525_create_teams.rb
#       new file:   db/migrate/20091022184938_add_test_runner_data.rb
#       new file:   db/migrate/20091022190306_add_stage_data.rb
#       new file:   db/schema.rb
#       new file:   generate
#       new file:   notebook.txt
#       new file:   public/stylesheets/scaffold.css
#       new file:   test/fixtures/runners.yml
#       new file:   test/fixtures/stages.yml
#       new file:   test/fixtures/teams.yml
#       new file:   test/functional/results_controller_test.rb
#       new file:   test/functional/runners_controller_test.rb
#       new file:   test/functional/stages_controller_test.rb
#       new file:   test/functional/status_controller_test.rb
#       new file:   test/functional/teams_controller_test.rb
#       new file:   test/unit/helpers/results_helper_test.rb
#       new file:   test/unit/helpers/runners_helper_test.rb
#       new file:   test/unit/helpers/stages_helper_test.rb
#       new file:   test/unit/helpers/status_helper_test.rb
#       new file:   test/unit/helpers/teams_helper_test.rb
#       new file:   test/unit/runner_test.rb
#       new file:   test/unit/stage_test.rb
#       new file:   test/unit/team_test.rb
#
Jetlabpro:SitRepStage skng$ git commit -a -m "Added runners, teams, results and status"
[master a5125f7] Added runners, teams, results and status
 57 files changed, 1503 insertions(+), 0 deletions(-)
 create mode 100644 app/controllers/results_controller.rb
 create mode 100644 app/controllers/runners_controller.rb
 create mode 100644 app/controllers/stages_controller.rb
 create mode 100644 app/controllers/status_controller.rb
 create mode 100644 app/controllers/teams_controller.rb
 create mode 100644 app/helpers/results_helper.rb
 create mode 100644 app/helpers/runners_helper.rb
 create mode 100644 app/helpers/stages_helper.rb
 create mode 100644 app/helpers/status_helper.rb
 create mode 100644 app/helpers/teams_helper.rb
 create mode 100644 app/models/runner.rb
 create mode 100644 app/models/stage.rb
 create mode 100644 app/models/team.rb
 create mode 100644 app/views/layouts/runners.html.erb
 create mode 100644 app/views/layouts/stages.html.erb
 create mode 100644 app/views/layouts/teams.html.erb
 create mode 100644 app/views/results/index.html.erb
 create mode 100644 app/views/runners/edit.html.erb
 create mode 100644 app/views/runners/index.html.erb
 create mode 100644 app/views/runners/new.html.erb
 create mode 100644 app/views/runners/show.html.erb
 create mode 100644 app/views/stages/edit.html.erb
 create mode 100644 app/views/stages/index.html.erb
 create mode 100644 app/views/stages/new.html.erb
 create mode 100644 app/views/stages/show.html.erb
 create mode 100644 app/views/status/index.html.erb
 create mode 100644 app/views/status/update.html.erb
 create mode 100644 app/views/teams/edit.html.erb
 create mode 100644 app/views/teams/index.html.erb
 create mode 100644 app/views/teams/new.html.erb
 create mode 100644 app/views/teams/show.html.erb
 create mode 100644 db/migrate/20091021230549_create_stages.rb
 create mode 100644 db/migrate/20091022140215_remove_times_from_stage.rb
 create mode 100644 db/migrate/20091022144051_create_runners.rb
 create mode 100644 db/migrate/20091022144525_create_teams.rb
 create mode 100644 db/migrate/20091022184938_add_test_runner_data.rb
 create mode 100644 db/migrate/20091022190306_add_stage_data.rb
 create mode 100644 db/schema.rb
 create mode 100644 generate
 create mode 100644 notebook.txt
 create mode 100644 public/stylesheets/scaffold.css
 create mode 100644 test/fixtures/runners.yml
 create mode 100644 test/fixtures/stages.yml
 create mode 100644 test/fixtures/teams.yml
 create mode 100644 test/functional/results_controller_test.rb
 create mode 100644 test/functional/runners_controller_test.rb
 create mode 100644 test/functional/stages_controller_test.rb
 create mode 100644 test/functional/status_controller_test.rb
 create mode 100644 test/functional/teams_controller_test.rb
 create mode 100644 test/unit/helpers/results_helper_test.rb
 create mode 100644 test/unit/helpers/runners_helper_test.rb
 create mode 100644 test/unit/helpers/stages_helper_test.rb
 create mode 100644 test/unit/helpers/status_helper_test.rb
 create mode 100644 test/unit/helpers/teams_helper_test.rb
 create mode 100644 test/unit/runner_test.rb
 create mode 100644 test/unit/stage_test.rb
 create mode 100644 test/unit/team_test.rb
Jetlabpro:SitRepStage skng$ git push
Counting objects: 86, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (72/72), done.
Writing objects: 100% (79/79), 13.12 KiB, done.
Total 79 (delta 18), reused 0 (delta 0)
To git@github.com:nomadicoder/SitRepStage.git
   511d2f8..a5125f7  master -> master
   

NOTE: Had to do git add * to get all new files in.

Friday, October 30, 2009
Want to list a stage runner chart.  List runners in stage order.

Here is how to get the derived values - an estimated time based on the runner's estimated pace and the stage distance
Mod will be made in the runner's model

    class Runner < ActiveRecord::Base
      belongs_to :stage
      belongs_to :team
      def self.find_all_runners
        find(:all, :order => "stage_id")
      end
    end

In the results controller, get the runner information

    class ResultsController < ApplicationController
      def index
        @runners = Runner.find_all_runners
      end
    end

Here is how to display the results table for all the runners.

    <% total_time = 0 %>
    <% @runners.each do |runner| %>
      <% stage_time = runner.stage.miles * (runner.estimated_pace.min + runner.estimated_pace.sec/60.0) %>
      <% total_time = total_time + stage_time %>
      <tr>
        <td><%=h runner.stage.number %></td>
        <td><%=h runner.stage.landmark %></td>
        <td><%=h runner.stage.miles %></td>
        <td><%=h runner.name %></td>
        <td><%=h stage_time %></td>
        <td><%=h total_time %></td>
        <td></td>
      </tr>
    <% end %>


Saturday, October 31, 2009

Display by team

Show other info.

Need to convert minutes (float) to time.
Create function?

Sunday, November 1, 2009

Display calculated times in line code.

Monday, November 2, 2009

Create form to input runner stage times.

Need to create a library to process time.

Tuesday, November 3, 2009

Working on helpers to display times in results page.

Unable to get totals because I reduced everthing to time domain.  Maybe it should be in seconds only.

Reduced all calculations to minute domain.  Tested.  Have cumulative times working as well as cumulative differentials.  All shown in results table


Wednesday, November 4, 2009
Use Cases

Actors: Fans, Ham CP operator, Shuttle CP operators, Follow Van CP operators, Support captains

Uses
Stage results
Stage news
Stage status
Shuttle status
Follow Van status
Outbound runner status
Inbound runner status
Final official results
Media album 

Limit what fans may see.
Use authentication access to restricted information such as runner names outside race window, possible penalty points, runner down, stage status.

CP operator has full CRUD access.


Next, input data from all teams.


Friday, November 6, 2009
Create team assignments and display the stages based on teams
Create form to enter stage times

Latter requires short time format.  It would be nice to also have a validation for this field.


Monday, November 9, 2009
Add authentication
1. Display all results columns for authenticated users
2. Display selected columns for unauthenticated users

Stage results entry form.
1. Authenticated users only

Future item:
    Drupal XML-RPC - facilitates updating stage results and blog.
    
Add authentication:

$ ruby script/generate scaffold user name:string hashed_password:string salt:string
      exists  app/models/
      exists  app/controllers/
      exists  app/helpers/
      create  app/views/users
      exists  app/views/layouts/
      exists  test/functional/
      exists  test/unit/
      exists  test/unit/helpers/
      exists  public/stylesheets/
      create  app/views/users/index.html.erb
      create  app/views/users/show.html.erb
      create  app/views/users/new.html.erb
      create  app/views/users/edit.html.erb
      create  app/views/layouts/users.html.erb
   identical  public/stylesheets/scaffold.css
      create  app/controllers/users_controller.rb
      create  test/functional/users_controller_test.rb
      create  app/helpers/users_helper.rb
      create  test/unit/helpers/users_helper_test.rb
       route  map.resources :users
  dependency  model
      exists    app/models/
      exists    test/unit/
      exists    test/fixtures/
      create    app/models/user.rb
      create    test/unit/user_test.rb
      create    test/fixtures/users.yml
      exists    db/migrate
      create    db/migrate/20091109192005_create_users.rb
      $ rake db:migrate
      (in /Users/skng/Projects/rails/SitRepStage)
      ==  CreateUsers: migrating ====================================================
      -- create_table(:users)
         -> 0.0022s
      ==  CreateUsers: migrated (0.0023s) ===========================================
$

Updated per Agile Web w Rails 3rd Ed.

Tuesday, November 10, 2009

Unable to get create new user:

        NoMethodError in UsersController#create

        undefined method `encrypted_password' for #<Class:0x1040ca530>
        RAILS_ROOT: /Users/skng/Projects/rails/SitRepStage


Problem is scope.  In models/user.rb

    def self.encrypted_password(password, salt)  
    
In above, note self. to make the private method available to public method:
    self.hashed_password = User.encrypted_password(self.password, self.salt)
    
Create log in forms

$ ruby script/generate controller admin login logout index
      exists  app/controllers/
      exists  app/helpers/
      create  app/views/admin
      exists  test/functional/
      exists  test/unit/helpers/
      create  app/controllers/admin_controller.rb
      create  test/functional/admin_controller_test.rb
      create  app/helpers/admin_helper.rb
      create  test/unit/helpers/admin_helper_test.rb
      create  app/views/admin/login.html.erb
      create  app/views/admin/logout.html.erb
      create  app/views/admin/index.html.erb
$

Add in authentication gate keeping later.

Add in code for status

Need to assign a string that indicates the status name, what group it belongs to: runner, catcher.

Criticality: none, low, medium, high
For example
No one on scene, 
Runner checked in, Catcher met, green
If the runner is one mile out, status should flash warning.  Radio silence required.
If exchange in progress (van in site of stage), flash fast.
If runner has cleared, solid green

There are two groups: Runners, Catcher.

The below are enumerations.  Stage will need two additional fields -- Assigned runner, Assigned catcher
We will need support table:

$ ruby script/generate scaffold runner_status status:string #enumeration
$ ruby script/generate scaffold catcher_status status:string #enumeration
$ ruby script/generate scaffold stage_status runner_status_id:integer support_status_id:integer short_description:string description:text

Stage schema will have new field stage_status_id:integer

Created diagram with wwwsqldesigner <http://code.google.com/p/wwwsqldesigner/>

Not liking the way I'm doing the team/runner/stage relationship.



Monday, November 16, 2009
Add forms to update stage only.

Cleaned up Schema.  Stages can be displayed by runner.  How do we show un-assigned stages?  Will have to be handled in model logic.

Stage assignment table?

Designed table where all items can be obtained.  What is the standard for table names?

Updated schema to provide the following tables:

Stage Status 
  Runner and support readiness
  Overall stage status
  Tracks runner and support assignments


Wednesday, November 18, 2009

Finish User tables

Implement new data tables.

Enumerated codes:
Unit_Types
Unit_Status_Codes
Runner_Status_Codes
Criticalities (Criticalities)

Lookup Tables:
Stage_Status_Codes

Main Tables (New):
Support_Units

Main Tables (Update):
Runners
Teams
ruby script/generate scaffold stage_status runner_status_id:integer support_status_id:integer short_description:string description:text


Tuesday, December 1, 2009

In case we delete all users:

$ ruby script/console
Loading development environment. 
>> User.create(:name => 'dave', :password => 'secret', :password_confirmation => 'secret') 
=> #<User:0x2933060 @attributes={...} ... >
>> User.count => 1


Friday, December 4, 2009

Redirect login to status:index
Check in updates

Saturday, December 5, 2009

Handle bootstrapping
Need to check in a bootstrap version of database.yml.  Copy it form hold area and rename it database.sqlite.yml.  Add this to GIT

Bootstrap process:
clone the git, create the database, migrate the database, add the first user to the database.

$ git clone git@github.com:nomadicoder/stageorders.git
$ rake db:create
$ rake db:migrate
$ ruby script/console
Loading development environment. 
>> User.create(:name => 'admin', :password => 'secret', :password_confirmation => 'secret') 
=> #<User:0x2933060 @attributes={...} ... >
>> User.count => 1

Ready to go.

Make results page available to public.

All committed and pushed.  Ready to move on.  Add runner id codes

First, add the scaffold and create a default set of codes in the migrate

$ script/generate scaffold runner_status_code sequence:integer short_code:string description:text
$ script/generate migration add_runner_codes

Select added for runner -- pulldown menu with runner status codes:
<p>
  <%= f.label :runner_status_code_id %><br />
  <%= f.collection_select (:runner_status_code_id, RunnerStatusCode.find(:all), :id, :short_code, :prompt => "Status") %>
</p>


*** Need to add one mile out status for each stage
Need

Monday, December 7, 2009

Create support unit model.

script/generate scaffold support_type short_code:string description:text
script/generate migration add_support_type

Codes:
SHUTTLE - Shuttle van
FOLLOW - Runner/Follow vehicle
CP - Command PostSupportType
ROVER - Rover operator

class AddSupportType < ActiveRecord::Migration
  def self.up
    SupportType.delete_all
    SupportType.create(
        :short_code => 'FOLLOW',
        :description => %{Follow Van -- Follows runner on course}
    )
    SupportType.create(
        :short_code => 'SHUTTLE',
        :description => %{Shuttle Van -- Transports runners and personnel between stages}
    )
    SupportType.create(
        :short_code => 'ROVER',
        :description => %{Rover vehicle -- Performs utility functions}
    )
    SupportType.create(
        :short_code => 'CP',
        :description => %{Command Post -- Center of support operations}
    )
    SupportType.create(
        :short_code => 'MOUNTAINTOP',
        :description => %{Mountain Top -- High elevation radio relay}
    )
  end

  def self.down
    SupportType.delete_all
  end
end


script/generate scaffold support_status_code sequence:float short_code:string description:text
script/generate migration add_support_status_codes

Codes:
UNK - Unknown status
ENR - En Route
ARR - On station/At stage
MET - Contacted Runner
BRK - On break
STG - Staging

class AddSupportStatusCode < ActiveRecord::Migration
  def self.up
    SupportStatusCode.delete_all
    SupportStatusCode.create(
        :sequence => 0.0,
        :short_code => 'UNK',
        :description => %{Runner status is unknown}
    )
    SupportStatusCode.create(
        :sequence => 1.0,
        :short_code => 'ENR',
        :description => %{Shuttle is en route to stage}
    )
    SupportStatusCode.create(
        :sequence => 2.0,
        :short_code => 'ARR',
        :description => %{Shuttle has arrived at the stage}
    )
    SupportStatusCode.create(
        :sequence => 4.0,
        :short_code => 'MET',
        :description => %{Catcher has made contact with the runner}
    )
    SupportStatusCode.create(
        :sequence => 8.0,
        :short_code => 'OUT',
        :description => %{Shuttle is out of service (on break, refueling, etc)}
    )
    SupportStatusCode.create(
        :sequence => 9.0,
        :short_code => 'STG',
        :description => %{Shuttle is at staging}
    )
  end

  def self.down
    SupportStatusCode.delete_all
  end
end


script/generate scaffold support_unit team_id:integer support_type_id:integer tac_callsign:string ham_callsign:string status_code_id:integer current_stage_id:integer location_lat:float location_lon:float


Thursday, December 10, 2009

We have a way to track runners and support, but all must be tied into a stage.
There are many stages assigned to a support team.  How can this be reflected?  Multiple records for support, one for each stage a support
unit is assigned.  Record called Stage assignment linked to runners, stage, and support unit.  Tracks runner and support unit status.

Tuesday, March 2, 2010

Since December 10, got estimated pace and stage time correctly displayed and linked fields cleaned up to display runner and support status.

Next, need to show team based results and status pages.  The user should be able to pick a team for the page and the page should display a filtered result based on team.

Also, each stage record needs an assigned team and unit.
This may not have been covered in the schema design.
There will be multiple stages assigned to a support unit.
So there should be a stage status with a link to a stage, team, runner, and support_unit.  This will alter the status controller, or make it go away.

Create a new schema.

NOTE: legs should be assigned to runners, so should replace Stage with Leg and use have exchange points?

The location is a stage?

Stage and Leg are synonymous in the rule books.  Use exchange point instead?

script/generate scaffold stage_status team_id:integer stage_id:integer runner_id:integer support_unit_id:integer runner_status_code_id:integer support_status_code_id:integer

Support_unit table has current_stage_id, which will be updated in real time
Added runner_status and support_id which has the latest status from the unit assigned to the stage.  This way we can retain stage status after the runner and support unit have departed the stage.
Team_id is hear to make things easier, as the runner and support unit can change or be un-assigned. we can have the stage and see a hole in the assignments.

Need Stage_status_code first
script/generate scaffold stage_status_code short_code:string description:string runner_status_code_id:integer support_status_code_id:integer

Completed Stage Status pages.  need to search stage_status_code for stage status given runner_status_code and support_status_code.

Wednesday, March 3, 2010

Stage_status table should have it's own status code field because it is from a lookup based on runner and support status.  This can be handled in the controller or view.

Thursday, March 4, 2010

Working on the stage status -- own to get inner join to work

Resultant query

SELECT "stage_status_codes".* FROM "stage_status_codes" INNER JOIN "runner_status_codes" ON "runner_status_codes".id = "stage_status_codes".runner_status_code_id INNER JOIN "support_status_codes" ON "support_status_codes".id = "stage_status_codes".support_status_code_id WHERE (runner_status_codes.short_code = 'CHK' AND support_status_codes.short_code = 'ONS') LIMIT 1

For successful joins with results:
SELECT "runners".* FROM "runners" INNER JOIN "stages" ON "stages".id = "runners".stage_id ORDER BY stages.number


find(:first, :joins => [:runner_status_code, :support_status_code], :conditions => "runner_status_codes.short_code = 'CHK' AND support_status_codes.short_code = 'ONS'")

Friday, March 5, 2010

Committed in changes to date.
Had to fix display of runner and support status codes in stage status code table

Display stage status code in stage statues.


Monday, March 8, 2010

Try changing status from the controller

Encountering:
  NoMethodError in RunnersController#update

  You have a nil object when you didn't expect it!
  You might have expected an instance of ActiveRecord::Base.
  The error occurred while evaluating nil.update_attributes
  RAILS_ROOT: /Users/skng/Projects/rails/stageorders

  Application Trace | Framework Trace | Full Trace
  /Users/skng/Projects/rails/stageorders/app/controllers/runners_controller.rb:64:in `update'

Unable to locate problem in:

  @runner = Runner.find(params[:id])
  @stage_status = StageStatus.find(:first, :readonly => false,
                                   :joins => [:stage, :team],
                                   :conditions => "stage_id = '#{@runner.stage_id}' AND team_id = '#{@runner.team_id}'")
  @state_status.update_attributes(:runner_status_code_id => @runner.runner_status_code_id) unless @runner.nil?

Problem is spelling.  stage, not state (t is above g on keyboard *doh*)

Next problem:

  ActiveRecord::ReadOnlyRecord in RunnersController#update

  ActiveRecord::ReadOnlyRecord

Needed :readonly => false in find call (http://forums.pragprog.com/forums/74/topics/2078)

Implemented as

runner_controller.rb

def update
  @runner = Runner.find(params[:id])
  @stage_status = StageStatus.find(:first, :readonly => false,
                                   :joins => [:stage, :team],
                                   :conditions => "stage_id = '#{@runner.stage_id}' AND team_id = '#{@runner.team_id}'")

  respond_to do |format|
    if @runner.update_attributes(params[:runner])
      @stage_status.update_attributes(:runner_status_code_id => @runner.runner_status_code_id) unless @stage_status.nil?
      flash[:notice] = 'Runner was successfully updated.'
      format.html { redirect_to(@runner) }
      format.xml  { head :ok }
    else
      format.html { render :action => "edit" }
      format.xml  { render :xml => @runner.errors, :status => :unprocessable_entity }
    end
  end
end


Support Update Does not update stage status. Need Note that team id for support is 0.
Fix code and update support unilts test fixtures
Correct in test fixtures.  

Need to set these.  Requires update to support unit new and edit to select team

Error on support_unit index.  Similar code as runners

<% @support_units.each do |support_unit| %>
  <tr>
    <td><%=h support_unit.team.short_name %></td>
    <td><%=h support_unit.short_code %></td>

Yields:

NoMethodError in Support_units#index

Showing app/views/support_units/index.html.erb where line #17 raised:

undefined method `short_name' for nil:NilClass
Extracted source (around line #17):

14: 
15: <% @support_units.each do |support_unit| %>
16:   <tr>
17:     <td><%=h support_unit.team.short_name %></td>
18:     <td><%=h support_unit.short_code %></td>
19:     <td><%=h support_unit.tac_callsign %></td>
20:     <td><%=h support_unit.ham_callsign %></td>

@support_unit.team.short_name displays okay in support_units show page.

  <p>
    <b>Team:</b>
    <%=h @support_unit.team.short_name %>
  </p>

Needed Join in controller query

def index
  @support_units = SupportUnit.find(:all, :joins => [:team])
  
  ...
end

Next, on Support_unit update, current_stage_id is the number.  It should be the stage_id.

Because form field is text field instead of selector.

Support Units and Runner Status working
Updates Stage Status.

Fix linked fields.

Clean up fixtures.

To do:
Update overall stage status.